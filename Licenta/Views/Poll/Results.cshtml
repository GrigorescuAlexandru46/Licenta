@model Licenta.Models.Poll

@{ int i = 1; }

<script src="https://d3js.org/d3.v4.js"></script>

<script>
    var questionsJson = {
        @foreach (var question in Model.Questions)
        {
            <text>"@(question.QuestionId)": [</text>
            foreach (var answer in question.Answers)
            {
                <text>"@(answer.AnswerId)",</text>
            }
            <text>],</text>

        }
    };

    var questionsTypeJson = {
        @foreach (var question in Model.Questions)
        {
            <text>"@(question.QuestionId)": @(question.QuestionType), </text>
        }
    };

    var answersJson = {
        @foreach (var question in Model.Questions)
        {
            foreach (var answer in question.Answers)
            {
                <text>"@(answer.AnswerId)": "@(answer.Text)",</text>
            }
        }
    };

    var answerCountJson = {
        @foreach (KeyValuePair<int, int> entry in ViewBag.AnswerSelectedCountMap)
        {
            <text>"@(entry.Key)": @(entry.Value),</text>
        }
    };

    var answersPercentageJson = {
        @foreach (KeyValuePair<int, double> entry in ViewBag.AnswerPercentageMap)
        {
            <text>"@(entry.Key)": @(entry.Value),</text>
        }
    };

    var customAnswerCountJson = {
        @foreach (KeyValuePair<int, Dictionary<string, int>> entry in ViewBag.CustomAnswerMap)
        {
            <text>"@(entry.Key)": {</text>
            foreach (KeyValuePair<string, int> internalEntry in entry.Value)
            {
                <text>"@(internalEntry.Key)": @(internalEntry.Value),</text>
            }
            <text>},</text>
        }
    };

    var customAnswersPercentageJson = {
        @foreach (KeyValuePair<int, Dictionary<string, double>> entry in ViewBag.CustomAnswerPercentageMap)
        {
            <text>"@(entry.Key)": {</text>
            foreach (KeyValuePair<string, double> internalEntry in entry.Value)
            {
                <text>"@(internalEntry.Key)": @(internalEntry.Value),</text>
            }
            <text>},</text>
        }
    };

    var combinationsJson = {
        @foreach (KeyValuePair<Tuple<int, int>, int> entry in ViewBag.AnswerCombinationCountList)
        {
            Tuple<int, int> combination = entry.Key;
            int count = entry.Value;

            <text>"@combination.Item1-@combination.Item2": @count,</text>
        }
    };
</script>

<script>
    var lastColorObjectId = -1;

    function generateRandomColorObject() {
        var colorsObject = {
            0: {
                color: "rgba(255, 99, 132, 0.5)",
                border: "rgba(255, 99, 132, 1)"
            },

            1: {
                color: "rgba(54, 162, 235, 0.5)",
                border: "rgba(54, 162, 235, 1)"
            },

            2: {
                color: "rgba(255, 206, 86, 0.5)",
                border: "rgba(255, 206, 86, 1)"
            },

            3: {
                color: "rgba(75, 192, 192, 0.5)",
                border: "rgba(75, 192, 192, 1)"
            },

            4: {
                color: "rgba(153, 102, 255, 0.5)",
                border: "rgba(153, 102, 255, 1)"
            },

            5: {
                color: "rgba(255, 159, 64, 0.5)",
                border: "rgba(255, 159, 64, 1)"
            }  
        };

        var randomColorObjectId = 0;

        // Make sure we don't generate the same color twice
        do {
            randomColorObjectId = Math.floor(Math.random() * 6);
        } while (randomColorObjectId == lastColorObjectId)

        // Save the new color as the last color generated
        lastColorObjectId = randomColorObjectId;

        return colorsObject[randomColorObjectId];
    }

    function extractQuestionId(stringTagId) {

        var stringMatches = stringTagId.match(/(\d+)/);
        var stringQuestionId = stringMatches[0];

        var numberQuestionId = parseInt(stringQuestionId, 10);
        numberQuestionId = isNaN(numberQuestionId) ? 0 : numberQuestionId;

        return numberQuestionId;
    }

    function truncateOptions() {
        var optionList = document.getElementsByTagName("option");

        for (let option of optionList) {
            if (option.innerHTML.length > 35) {
                option.innerHTML = option.innerHTML.slice(0, 31);
                option.innerHTML = option.innerHTML.concat(" ...");
            }
        }
    }

    function arrayEquals(a, b) {
        return Array.isArray(a) &&
            Array.isArray(b) &&
            a.length === b.length &&
            a.every((val, index) => val === b[index]);
    }

    function countProperties(obj) {
        var count = 0;

        for (var prop in obj) {
            if (obj.hasOwnProperty(prop))
                ++count;
        }

        return count;
    }
</script>

<script>
    window.onload = function () {
        //truncateOptions();

        // Create all charts
        for (var questionId in questionsJson) {
            if (questionsJson.hasOwnProperty(questionId)) {

                var divChart = document.getElementById("divChart" + questionId);

                // Set chart dimensions
                divChart.style.height = "60vh";
                var margin = { top: 30, right: 30, bottom: 70, left: 60 };
                var width = divChart.offsetWidth - margin.left - margin.right;
                var height = divChart.offsetHeight - margin.top - margin.bottom;
                var chartDimensions = { "margin": margin, "width": width, "height": height };

                // Create chart
                if (questionsTypeJson[questionId] != 3) {
                    createBarChart("#divChart" + questionId, gatherData(questionId), chartDimensions);
                }
            }
        }

        //setTimeout(updateResults, 3000);
        //setTimeout(updateResults, 3000);
        setInterval(updateResults, 5000);
    }   

    function gatherData(questionId) {
        var data = [];

        questionsJson[questionId].forEach(function (answerId) {
            data.push({
                answerText: answersJson[answerId],
                answerCount: answerCountJson[answerId],
                answerId: answerId
            });
        });

        return data;
    }

    function calculateTicks(max) {
        if (max == 1) { return 1; }
        if (max < 5) { return 2; }
        if (max < 10) { return 5; }
        return 10;
    }

    function createBarChart(divChartId, receivedData, chartDimensions) {
        // Get maximum answer count (will be used below)
        var maxAnswerCount = Math.max.apply(Math, receivedData.map(function (d) { return d.answerCount; }));

        // Set dimensions
        var margin = chartDimensions["margin"];
        var width = chartDimensions["width"];
        var height = chartDimensions["height"];

        // Create Svg and group
        var svg = d3.select(divChartId)
            .append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        // Create and append X axis
        var xAxis = d3.scaleBand()
            .range([0, width])
            .domain(receivedData.map(function (d) { return d.answerText; }))
            .padding(0.2);
        svg.append("g")
            .attr("class", "x-axis")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(xAxis))
            .selectAll("text")
                .attr("class", "font-weight-bold")
                .attr("transform", "translate(-10,0)rotate(-45)")
                .style("text-anchor", "end")
                .style("font-size", "1rem");

        // Create and append Y axis
        var yAxis = d3.scaleLinear()
            .domain([0, maxAnswerCount])
            .range([height, 0]);
        svg.append("g")
            .attr("class", "y-axis")
            .call(d3.axisLeft(yAxis)
                .ticks(calculateTicks(maxAnswerCount))
                .tickFormat(d3.format("d")));

        // create a tooltip
        var tooltip = d3.select("body")
            .append("div")
                .attr("class", "font-weight-bold text-dark px-2 py-2")
                .style("position", "absolute")
                .style("z-index", "10")
                .style("visibility", "hidden")
                .style("background", "lavender")
                .style("border", "1px solid gray")
                .style("border-radius", "12px")
                .style("text-align", "center")
                .style("visibility", "hidden")
                .style("visibility", "hidden")
                .style("visibility", "hidden")
                .on("mousemove", function () { return tooltip.style("top", (event.pageY - 75) + "px").style("left", (event.pageX) + 5 + "px"); });

        // Generate random color
        var colorObject = generateRandomColorObject();

        // Create and append bars
        svg.selectAll("rect").data(receivedData)
            .enter()
            .append("g")
                    .attr("class", "barGroup")
                    .append("rect")
                        .attr("x", function (d) { return xAxis(d.answerText); })
                        .attr("y", function (d) { return yAxis(0); })
                        .attr("width", xAxis.bandwidth())
                        .attr("height", function (d) { return height - yAxis(0); })
                        .attr("fill", colorObject.color)
                        .style("stroke", colorObject.border)
                        .style("stroke-width", 1)
                        .on("mouseover", function (d) { return tooltip.style("visibility", "visible").html(d.answerText + ": " + d.answerCount + "<hr class='my-1' />" + answersPercentageJson[d.answerId].toFixed(2) + "%"); })
                        .on("mousemove", function () { return tooltip.style("top", (event.pageY - 75) + "px").style("left", (event.pageX) + 5 + "px"); })
                        .on("mouseout", function (d) { return tooltip.style("visibility", "hidden").html(""); })
                        .transition().duration(1500)
                            .attr("y", function (d) { return yAxis(d.answerCount); })
                            .attr("height", function (d) { return height - yAxis(d.answerCount); })
                            .delay(function (d, i) { return (i * 100) }); 
    
        // Append text to each bar
        svg.selectAll(".barGroup").data(receivedData)
            .append("text")
                .attr("x", function (d) { return xAxis(d.answerText) + xAxis.bandwidth() / 2; })
                .attr("y", function (d) { return yAxis(d.answerCount - (maxAnswerCount / 7)); })
                .attr("font-size", "2vw")
                .attr("text-anchor", "middle")
                .attr("font-family", "cursive")
                .style("fill", "white")
                .style("opacity", 0)
                .style("pointer-events", "none")
                .text(function (d) { return (d.answerCount > 0 ? Math.round(answersPercentageJson[d.answerId]) + "%" : ""); })
                .on("mouseover", function (d) { return tooltip.style("visibility", "visible").html(d.answerText + ": " + d.answerCount); })
                .on("mousemove", function () { return tooltip.style("top", (event.pageY - 75) + "px").style("left", (event.pageX) + 5 + "px"); })
                .on("mouseout", function (d) { return tooltip.style("visibility", "hidden").html(""); })
                .transition().duration(1500)
                    .delay(1500)
                    .style("opacity", 1.0);
    }

    function updateBarChart(divChartId, receivedData, chartDimensions) {
        // Get maximum answer count (will be used below)
        var maxAnswerCount = Math.max.apply(Math, receivedData.map(function (d) { return d.answerCount; }));

        // Select svg
        var svg = d3.select(divChartId).select("svg");

        // Select the outdated Y axis
        var outdatedYaxis = svg.select("g.y-axis");

        var margin = chartDimensions["margin"];
        var width = chartDimensions["width"];
        var height = chartDimensions["height"];

        // Create new Y axis
        var newYaxis = d3.scaleLinear()
            .domain([0, maxAnswerCount])
            .range([height, 0]);

        // Update Y axis
        outdatedYaxis
            .transition().duration(1500)
            .call(d3.axisLeft(newYaxis)
                .ticks(calculateTicks(maxAnswerCount))
                .tickFormat(d3.format("d")));

        // Update values
        svg.selectAll("rect").data(receivedData)
            .transition()
            .duration(1500)
            .attr("y", function (d) { return newYaxis(d.answerCount); })
            .attr("height", function (d) { return height - newYaxis(d.answerCount); })

        // Append text to each bar
        svg.selectAll(".barGroup").data(receivedData)
            .select("text")
            .transition().duration(1500)
            .attr("y", function (d) { return newYaxis(d.answerCount - (maxAnswerCount / 7)); })
            .text(function (d) { return (d.answerCount > 0 ? Math.round(answersPercentageJson[d.answerId]) + "%" : ""); });
    };

    function updateResults() {
        $.ajax({
            type: "POST",
            url: "/Poll/UpdateResults/@(Model.PollId)",
            data: null,
            dataType: "json",
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                var dataJson;

                try {
                    // Try converting string to js object
                    dataJson = JSON.parse(data);

                    // Update js objects
                    answerCountJson = dataJson["answerSelectedCountMapJson"];
                    combinationsJson = dataJson["answerCombinationCountListJson"];
                    customAnswerCountJson = dataJson["customAnswerMapJson"];
                    answersPercentageJson = dataJson["answerPercentageMapJson"];
                    customAnswersPercentageJson = dataJson["customAnswerPercentageMapJson"];
                }
                catch (err) {
                    if (err instanceof SyntaxError) {
                        console.log("No submissions - No update");
                    }
                    else {
                        console.log("Error - No update");
                    }
                    
                    return;
                } 

                // Update each chart
                for (var questionId in questionsJson) {
                    if (questionsJson.hasOwnProperty(questionId)) {
                        if (questionsTypeJson[questionId] != 3) {
                            // Set chart dimensions
                            var divChart = document.getElementById("divChart" + questionId);
                            divChart.style.height = "60vh";
                            var margin = { top: 30, right: 30, bottom: 70, left: 60 };
                            var width = divChart.offsetWidth - margin.left - margin.right;
                            var height = divChart.offsetHeight - margin.top - margin.bottom;
                            var chartDimensions = { "margin": margin, "width": width, "height": height };

                            // Update chart data
                            updateBarChart("#divChart" + questionId, gatherData(questionId), chartDimensions)
                        }
                    }
                }    

                console.log("Update");
            },
            error: function () {
                alert("There was an error while attempting to update live results")
            }
        });
    }

</script>

<br />
<h1 class="text-center display-3 font-weight-bold">Results</h1>
<hr />

@foreach (var question in Model.Questions)
{
    <div class="jumbotron">
        <div class="row">
            <div class="col-12">
                <h1 class="text-center font-weight-bold cut-text">Question @i</h1>
            </div>
        </div>

        <div class="row mt-5 mb-4 ml-3">
            <div class="col-12">
                <div class="d-block d-sm-none">
                    <h5 class="font-weight-bold">@question.Text</h5>
                </div>
                <div class="d-none d-sm-block d-md-none">
                    <h4 class="text-justify font-weight-bold">@question.Text</h4>
                </div>
                <div class="d-none d-md-block">
                    <h3 class="text-justify font-weight-bold">@question.Text</h3>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <div id="divChart@(question.QuestionId)"></div>
            </div>
        </div>       
    </div>

    i++;
}


