@model Licenta.Models.Poll

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js">

</script>

<style>
    .cut-text {
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
    }

    .chartWrapper {
        position: relative;
    }

    .chartWrapper > canvas {
        position: absolute;
        left: 0;
        top: 0;
        pointer-events: none;
    }

    .chartAreaWrapper {
        height: 60vh;
        overflow-y: scroll;
    }

</style>

@{
    ViewBag.Title = "Results";
    int i = 1;
}

<br />
<h1 class="text-center display-3 font-weight-bold">Results</h1>
<hr />

@foreach (var question in Model.Questions)
{
    if (question.QuestionType != 3)
    {
        <div class="jumbotron">
            <div class="row">
                <div class="col-12">
                    <h1 class="text-center font-weight-bold cut-text">Question @i</h1>
                </div>
            </div>

            <div class="row mt-5 mb-4 ml-3">
                <div class="col-12">
                    <div class="d-block d-sm-none">
                        <h5 class="font-weight-bold">@question.Text</h5>
                    </div>
                    <div class="d-none d-sm-block d-md-none">
                        <h4 class="text-justify font-weight-bold">@question.Text</h4>
                    </div>
                    <div class="d-none d-md-block">
                        <h3 class="text-justify font-weight-bold">@question.Text</h3>
                    </div>
                </div>  
            </div>

            <canvas id="chart@(i)" style="width: 100%; height: 60vh"></canvas>
            <script>
                function shuffle(array) {
                    var currentIndex = array.length, temporaryValue, randomIndex;

                    while (0 !== currentIndex) {
                        randomIndex = Math.floor(Math.random() * currentIndex);
                        currentIndex -= 1;

                        temporaryValue = array[currentIndex];
                        array[currentIndex] = array[randomIndex];
                        array[randomIndex] = temporaryValue;
                    }

                    return array;
                }

                var colorList = [
                    "rgba(255, 99, 132, 0.4)",
                    "rgba(54, 162, 235, 0.4)",
                    "rgba(255, 206, 86, 0.4)",
                    "rgba(75, 192, 192, 0.4)",
                    "rgba(153, 102, 255, 0.4)",
                    "rgba(255, 159, 64, 0.4)"
                ];

                shuffle(colorList);

                var randomizedColors = [];
                for (var i = 0; i < @question.Answers.Count; i++) {
                    randomizedColors.push(colorList[i % colorList.length]);
                }

                var ctx = document.getElementById('chart@(i)');
                Chart.defaults.global.responsive = false;
                Chart.defaults.global.defaultFontFamily = 'Helvetica';
                Chart.defaults.global.defaultFontSize = 18;
                Chart.defaults.global.defaultFontColor = 'gray';
                Chart.defaults.global.legend.display = false;
                var myChart@(i) = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: [
                                @foreach (var answer in question.Answers)
                                {
                                    <text>'@answer.Text'</text>
                                    if(answer != question.Answers.Last())
                                    {
                                        <text>, </text>
                                    }
                                }
                        ],
                        datasets: [{
                            data: [
                                @foreach (var answer in question.Answers)
                                {
                                    <text>@ViewBag.AnswerSelectedCountMap[answer.AnswerId]</text>
                                    if(answer != question.Answers.Last())
                                    {
                                        <text>, </text>
                                    }
                                }
                            ],

                            backgroundColor: randomizedColors,
                            borderColor: randomizedColors,
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            yAxes: [{
                                ticks: {
                                    beginAtZero: true
                                }
                            }]
                        },
                        legend: {
                            labels: {
                                fontColor: 'pink',
                            }
                        }

                    }
                });
            </script>
        </div>  

        <br /><br /><br />
    }
    else
    {
        <div class="jumbotron">
            <div class="row">
                <div class="col-12">
                    <h1 class="text-center font-weight-bold">Question @i</h1>
                </div>
            </div>

            <div class="row mt-5 mb-4 ml-3">
                <div class="col-12">
                    <div class="d-block d-sm-none">
                        <h5 class="font-weight-bold">@question.Text</h5>
                    </div>
                    <div class="d-none d-sm-block d-md-none">
                        <h4 class="text-justify font-weight-bold">@question.Text</h4>
                    </div>
                    <div class="d-none d-md-block">
                        <h3 class="text-justify font-weight-bold">@question.Text</h3>
                    </div>
                </div>
            </div>

            <div class="chartWrapper">
                <div class="chartAreaWrapper">
                    <canvas id="chart@(i)" style="width: 100%; height: 60vh"></canvas>
                </div>
            </div>

            <script>
                function sortAsc(unsortedObject) {
                    var sortedArray = [];
                    for (var key in unsortedObject) {
                        sortedArray.push([key, unsortedObject[key]]);
                    }

                    sortedArray.sort(function (a, b) {
                        return a[1] - b[1];
                    });

                    var sortedObject = {};
                    sortedArray.forEach(function (item) {
                        sortedObject[item[0]] = item[1]
                    })

                    return sortedObject;
                }

                function sortDesc(unsortedObject) {
                    var sortedArray = [];
                    for (var key in unsortedObject) {
                        sortedArray.push([key, unsortedObject[key]]);
                    }

                    sortedArray.sort(function (a, b) {
                        return b[1] - a[1];
                    });

                    var sortedObject = {};
                    sortedArray.forEach(function (item) {
                        sortedObject[item[0]] = item[1]
                    })

                    return sortedObject;
                }

                function extractKeysToArray(object) {
                    var keyArray = [];

                    for (var key in object) {
                        keyArray.push(key);
                    }

                    return keyArray;
                }

                function extractValuesToArray(object) {
                    var valueArray = [];

                    for (var key in object) {
                        valueArray.push(object[key]);
                    }

                    return valueArray;
                }

                function nextPage() {
                    // console.log(myChart.data.labels);
                    testData = [25, 30, 20, 22, 60, 30, 35, 38, 29, 17];
                    myChart@(i).data.datasets[0].data = testData;
                    myChart@(i).update();
                }

                function previousPage(myChart) {
                    alert("Previous page");
                }

                function shuffle(array) {
                    var currentIndex = array.length, temporaryValue, randomIndex;

                    while (0 !== currentIndex) {
                        randomIndex = Math.floor(Math.random() * currentIndex);
                        currentIndex -= 1;

                        temporaryValue = array[currentIndex];
                        array[currentIndex] = array[randomIndex];
                        array[randomIndex] = temporaryValue;
                    }

                    return array;
                }

                var colorList = [
                    "rgba(255, 99, 132, 0.4)",
                    "rgba(54, 162, 235, 0.4)",
                    "rgba(255, 206, 86, 0.4)",
                    "rgba(75, 192, 192, 0.4)",
                    "rgba(153, 102, 255, 0.4)",
                    "rgba(255, 159, 64, 0.4)"
                ];

                shuffle(colorList);

                var randomizedColors = [];
                for (var i = 0; i < @ViewBag.CustomAnswerMap[question.QuestionId].Count; i++) {
                    randomizedColors.push(colorList[i % colorList.length]);
                }

                var jsCustomAnswerObject = {
                @foreach (var entryAnswer in ViewBag.CustomAnswerMap[question.QuestionId])
                {
                    <text>"@entryAnswer.Key": @entryAnswer.Value, </text>
                }
                };

                jsCustomAnswerObject = sortDesc(jsCustomAnswerObject);

                var keyArray = extractKeysToArray(jsCustomAnswerObject);
                var valueArray = extractValuesToArray(jsCustomAnswerObject);

                var ctx = document.getElementById('chart@(i)');
                Chart.defaults.global.responsive = false;
                Chart.defaults.global.defaultFontFamily = 'Helvetica';
                Chart.defaults.global.defaultFontSize = 18;
                Chart.defaults.global.defaultFontColor = 'gray';
                Chart.defaults.global.legend.display = false;
                var myChart@(i) = new Chart(ctx, {
                    type: 'horizontalBar',
                    data: {
                        labels: keyArray,
                        datasets: [{
                            data: valueArray,
                            backgroundColor: randomizedColors,
                            borderColor: randomizedColors,
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            xAxes: [{
                                ticks: {
                                    beginAtZero: true,
                                    stepSize: 1
                                }
                            }]
                        },
                        legend: {
                            labels: {
                                fontColor: 'pink',
                            }
                        }

                    }
                });
            </script>

            

            
        </div>
        <br /><br /><br />
    }

    i++;
}


